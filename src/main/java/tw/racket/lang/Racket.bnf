{
  parserClass="tw.racket.lang.parser.RacketParser"
  parserUtilClass="tw.racket.lang.parser.RacketParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Racket"
  psiImplClassSuffix="Impl"
  psiPackage="tw.racket.lang.psi"
  psiImplPackage="tw.racket.lang.psi.impl"

  elementTypeHolderClass="tw.racket.lang.psi.RacketTypes"
  elementTypeClass="tw.racket.lang.psi.RacketElementType"
  tokenTypeClass="tw.racket.lang.psi.RacketTokenType"

  psiImplUtilClass="tw.racket.lang.psi.impl.RacketPsiImplUtil"
}

racketFile ::= LANG body

body ::= (COMMENT | top_form)*

top_form ::= <<parenthesis (MODULE_PLUS VARIABLE form*)>>
            | <<parenthesis (REQUIRE VARIABLE*)>>
            | <<parenthesis (PROVIDE VARIABLE*)>>
            | define_struct
            | form
define_struct ::= <<parenthesis (STRUCT VARIABLE (VARIABLE*) ("#:mutable" | "#:transparent")*)>>

form ::= define_var
        | define_func
        | expression
define_var ::= <<parenthesis (DEFINE VARIABLE expression)>>
define_func ::= <<parenthesis (DEFINE <<parenthesis VARIABLE*>> form*)>>

keyword ::= QUOTE | LAMBDA | IF | SET | BEGIN | COND | AND
            | OR | CASE | LET | LET_STAR | LET_REC | DO | DELAY
            | MODULE_PLUS | PROVIDE | REQUIRE
            | QUASIQUOTE | ELSE | DEFINE | UNQUOTE | UNQUOTE_SPLICING

expression ::= literal
                | <<parenthesis (IF expression expression expression)>>
                | <<parenthesis (COND cond_clause_*)>>
                | <<parenthesis (MATCH expression match_clause_*)>>
                // function call
                | <<parenthesis (VARIABLE expression*)>>
private cond_clause_ ::= <<parenthesis (expression form*)>>
private match_clause_ ::= <<parenthesis (expression form*)>>

boolean ::= TRUE | FALSE
literal ::= boolean
          | VARIABLE
          | CHAR_LITERAL
          | STRING_LITERAL
          | NUMBER_LITERAL
          | list
          | vector
          | UNQUOTE expression
          | UNQUOTE_SPLICING expression
list ::= SINGLE_QUOTE <<parenthesis expression*>>
        | SINGLE_QUASIQUOTE <<parenthesis expression*>>
vector ::= HASH_LPAREN expression* RPAREN
         | HASH_LBRACE expression* RBRACE
         | HASH_LBRACK expression* RBRACK

private meta parenthesis ::= LPAREN <<p>> RPAREN
                       | LBRACE <<p>> RBRACE
                       | LBRACK <<p>> RBRACK
