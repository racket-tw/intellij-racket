{
  parserClass="tw.racket.lang.parser.RacketParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Racket"
  psiImplClassSuffix="Impl"
  psiPackage="tw.racket.lang.psi"
  psiImplPackage="tw.racket.lang.psi.impl"

  elementTypeHolderClass="tw.racket.lang.psi.RacketTypes"
  elementTypeClass="tw.racket.lang.psi.RacketElementType"
  tokenTypeClass="tw.racket.lang.psi.RacketTokenType"

  psiImplUtilClass="tw.racket.lang.psi.impl.RacketPsiImplUtil"
}

racketFile ::= LANG? item_*

private item_ ::= COMMENT
keyword ::= QUOTE | LAMBDA | IF | SET | BEGIN | COND | AND
                    | OR | CASE | LET | LET_STAR | LET_REC | DO | DELAY
                    | QUASIQUOTE | ELSE | DEFINE | UNQUOTE | UNQUOTE_SPLICING
private boolean_ ::= TRUE | FALSE
literal ::= quotation
          | boolean_
          | CHAR_LITERAL
          | STRING_LITERAL
          | NUMBER_LITERAL
private meta wrap_parenthesis ::= LPAREN <<p>> RPAREN
                       | LBRACE <<p>> RBRACE
                       | LBRACK <<p>> RBRACK
any ::= keyword | literal | datum | <<wrap_parenthesis any>>
form ::= <<wrap_parenthesis any>>
private simple_datum ::= boolean_
                       | NUMBER_LITERAL
                       | CHAR_LITERAL
                       | STRING_LITERAL
                       | VARIABLE
private compound_datum ::= list | vector
list ::= <<wrap_parenthesis datum*>>
       | abbreviation
abbreviation ::= (SINGLE_QUOTE | ABBREVIATION_PREFIX) datum
vector ::= HASH_LPAREN datum* RPAREN
         | HASH_LBRACE datum* RBRACE
         | HASH_LBRACK datum* RBRACK
private datum ::= simple_datum | compound_datum
quotation ::= SINGLE_QUOTE datum
            | SINGLE_QUASIQUOTE datum
            | <<wrap_parenthesis (QUOTE datum)>>
body ::= form*
property ::= any
